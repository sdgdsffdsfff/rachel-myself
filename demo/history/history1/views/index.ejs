<!DOCTYPE html>
<html>
  <head>
    <title>（列表页）测试列表页到单页，异步加载的内容是不是会被自动定位</title>
    <meta charset="utf-8">
    <meta content="yes" name="apple-mobile-web-app-capable">
    <meta content="yes" name="apple-touch-fullscreen">
    <meta content="telephone=no,email=no" name="format-detection">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">
    <style>
        .item {
            display: block;
            width: 200px;
            border: 1px solid red;
            height: 200px;
        }

        .btn-more {
            background-color: #888;
            height: 50px;
            border: 1px solid red;
            color: blue;
        }
    </style>
    <script src="zepto.js"></script>
  </head>
  <body>
    <% items.forEach(function(name) { %>
    <a class="item" href="/detail">
        <%= name %>
    </a>
    <% }) %>
    <p class="btn-more" id="btnMore">加载更多</p>
    <script>
alert(document.location.href);
//用于测试，通过浏览器自带的返回，返回后的页面会不会重新刷新渲染
alert('1111')
    $('#btnMore').on('tap', function() {
        getMore();
    });

    function getMore() {
        $.ajax({
            type: 'GET',
            url: '/getMore',
            success: function(data) {
                insertData(data.items);
            }
        });

        function insertData(items) {
            var $ele = $('#btnMore');
            items.forEach(function(name) {
                $ele.before('<a href="/detail" class="item">' + name + '</a>');
            });

            historyReturn();
        } 
    }


    function historyReturn() {
        //返回问题
        //replaceState会替换当前的url，但是不会刷新页面，目的是将存储浏览器历史记录中href改成replaceState指定的url

        //pushState，则也会把当前url更改成pushState指定的url（页面不刷新）
        history.replaceState({
            name: 'test'
        }, null, document.location.href + '?page=2');
    }

    /*
    $(window).on('popstate', function() {
        当触发了该事件时，当前页面的url就会自动变成刚pop出的url（即最近一次pushState的或者replaceState的url）。前进/后退都会触发该事件，只要该页面push或replace过
    
    });

    history.state永远表示的是当前push或者replace的state


    history html5中的history，pushState等api使用，最好不要参与浏览器不同页面之间跳转浏览器的历史记录。即最好的应用场景是单页面，ajax异步（展示不同内容）。通过url的变化，然后手动触发click，去请求对应异步内容。
    */

    </script>
  </body>
</html>
